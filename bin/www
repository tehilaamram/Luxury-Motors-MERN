#!/usr/bin/env node

/**
 * Module dependencies.
 */
// if (process.env.NODE_ENV !== 'production') {
//   require('dotenv').load();
// }
const dotenv = require('dotenv');
dotenv.config();
var app = require('../app');
var debug = require('debug')('try:server');
var http = require('http');
var ChatRoom = require('../models')("ChatRoom");
var ChatMessage = require('../models')("ChatMessage");
var User = require('../models')("User");
var ObjectId = require('mongoose').Types.ObjectId;/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.REACT_APP_SERVER_PORT);

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io')(server);
var usernames = {};

io.on('connect', (socket) => {
  // when the client emits 'join', this listens and executes
  socket.on('join', function (username) {
    console.log(username, ' username in join');
    // store the username in the socket session for this client
    socket.username = username;
    console.log('join ', socket.username);
    socket.emit('username', 'SERVER', 'you have connected');

  });
  socket.on('switchRoom', function (newroom, userId) {
    console.log(socket.username, 's u')
    var currentRoom = Object.keys(io.sockets.adapter.sids[socket.id]).filter(item => item != socket.id);
    ChatRoom.findOne({ name: currentRoom[0] }).exec().then((room) => {
      if (room !== null && room.onlineMembers.includes(userId)) {
        var index = room.onlineMembers.indexOf(userId);
        if (index > -1) {
          room.onlineMembers.splice(index, 1);
          room.save();
          socket.broadcast.to(currentRoom[0]).emit('updateOnlineMembers', room.onlineMembers.length);
        }
      }
      if (room !== null) {
        socket.leave(currentRoom[0]);
      }
      socket.join(newroom);
      ChatRoom.findOne({ name: newroom }).exec().then((roomJoin) => {
        if (roomJoin !== null) {
          if (!(roomJoin.onlineMembers.includes(userId))) {
            roomJoin.onlineMembers.push(userId);
            roomJoin.save();
            // ChatMessage.find({room: roomJoin.id}).populate({ path: 'sender', model: 'User', select: 'username role'}).exec((err, list) => {
            //   socket.emit('getLast20Messages', list);
            // });
            // socket.emit('updateOnlineMembers', roomJoin.onlineMembers.length);
            // socket.broadcast.to(newroom).emit('updateOnlineMembers', roomJoin.onlineMembers.length);
          }
          ChatMessage.find({room: roomJoin.id}).populate({ path: 'sender', model: 'User', select: 'username role'}).exec((err, list) => {
            socket.emit('getLast20Messages', list);
          });
          socket.emit('updateOnlineMembers', roomJoin.onlineMembers.length);
          socket.broadcast.to(newroom).emit('updateOnlineMembers', roomJoin.onlineMembers.length);
        }
      });
    });
  });
  // when the client emits 'sendchat', this listens and executes
  socket.on('sendchat', (data, userId, groupId, callback) => {
    console.log(socket.username, ' username');
    var currentRoom = Object.keys(io.sockets.adapter.sids[socket.id]).filter(item => item != socket.id);
    var currentChatMessage = new ChatMessage({
      sender: userId,
      room: groupId,
      date: new Date(),
      message: data,
    });
    currentChatMessage.save().then((m) => {
      // console.log(socket.username, ' username to send');
      User.findOne({ username: socket.username }).exec().then((user) => {
        io.sockets.in(currentRoom[0]).emit('updatechat', socket.username, { sender: { username: socket.username, role: user.role}, message: data, date: currentChatMessage.date });
        callback();
        // ChatRoom.find({ onlineMembers: { "$in" : [user._id]} }).exec((err, list) => {
        //   list.forEach(element => {
        //     element.onlineMembers.pop(user._id);
        //     element.save();
        //     socket.broadcast.to(element.name).emit('updateOnlineMembers', element.onlineMembers.length);
        //   });
        // });
      });
      // we tell the client to execute 'updatechat' with 2 parameters
      // io.sockets.in(currentRoom[0]).emit('updatechat', socket.username, { sender: { username: socket.username}, message: data, date: currentChatMessage.date });
      // callback();
      // callback();{}

    })
  });
  socket.on('loadMore', (lastMessage) => {
    console.log(lastMessage, ' username');
        var currentRoom = Object.keys(io.sockets.adapter.sids[socket.id]).filter(item => item != socket.id);
    ChatMessage.find({room: currentRoom.id}).populate({ path: 'sender', select: 'username'}).exec((err, list) => {
      // const isTheSameId = (element) => element._id === lastMessage._id;
      // const index = list.findIndex(isTheSameId);
          socket.emit('loadMoreMessages', list);
      // if (index > 15) {
      //   socket.emit('loadMoreMessages', list.slice(index - 16, index));
      // } else {
      //   socket.emit('loadMoreMessages', list.slice(0, index));
      // }
      // callback()
    });
    // var currentChatMessage = new ChatMessage({
    //   sender: ObjectId(userId),
    //   room: ObjectId(groupId),
    //   date: new Date(),
    //   message: data,
    // });
    // currentChatMessage.save().then((m) => {
    //   console.log(socket.username, ' username to send');
    //   // we tell the client to execute 'updatechat' with 2 parameters
    //   io.sockets.in(currentRoom[0]).emit('updatechat', socket.username, { sender: { username: socket.username}, message: data, date: currentChatMessage.date });
    //   callback();
    //   // callback();{}

    // })
  });
  // when the user disconnects.. perform this
  socket.on('disconnect', function () {
    console.log('in dissconnect');
    User.findOne({ username: socket.username }).exec().then((user) => {
      ChatRoom.find({ onlineMembers: { "$in" : [user._id]} }).exec((err, list) => {
        list.forEach(element => {
          element.onlineMembers.pop(user._id);
          element.save();
          socket.broadcast.to(element.name).emit('updateOnlineMembers', element.onlineMembers.length);
        });
      });
    });
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
