#!/usr/bin/env node

/**
 * Module dependencies.
 */
// if (process.env.NODE_ENV !== 'production') {
//   require('dotenv').load();
// }
const dotenv = require('dotenv');
dotenv.config();
var app = require('../app');
var debug = require('debug')('try:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.REACT_APP_SERVER_PORT);

app.set('port', port);
const { addUser, removeUser, getUser, getUsersInRoom } = require('./users');

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io')(server);
var usernames = {};

io.on('connect', (socket) => {
  // when the client emits 'adduser', this listens and executes
	socket.on('adduser', function(username){
		// store the username in the socket session for this client
		socket.username = username;
		// store the room name in the socket session for this client
		// socket.room = 'Luxury Motors';
		// add the client's username to the global list
		usernames[username] = username;
		// send client to room 1
    socket.join('Luxury Motors');
    console.log(socket.rooms, ' adduser');
		// echo to client they've connected
		socket.emit('updatechat', 'SERVER', 'you have connected to Luxury Motors');
		// echo to room 1 that a person has connected to their room
		socket.broadcast.to('Luxury Motors').emit('updatechat', 'SERVER', username + ' has connected to this room');
		// socket.emit('updaterooms', rooms, 'Luxury Motors');
  });
  socket.on('switchRoom', function(newroom){
    var currentRoom = Object.keys(io.sockets.adapter.sids[socket.id]).filter(item => item!=socket.id);
    console.log(socket.rooms, ' switch rooms', currentRoom);
		socket.leave(currentRoom[0]);
		socket.join(newroom);
		socket.emit('updatechat', 'SERVER', 'you have connected to '+ newroom);
		// sent message to OLD room
		socket.broadcast.to(currentRoom[0]).emit('updatechat', 'SERVER', socket.username +' has left this room');
		// update socket session room title
		socket.room = newroom;
		socket.broadcast.to(newroom).emit('updatechat', 'SERVER', socket.username+' has joined this room');
		// socket.emit('updaterooms', rooms, newroom);
	});
  // socket.on('join', ({ name, room }, callback) => {
  //   // const user = getUser(socket.id);
  //   // console.log('join');
  //   console.log(socket.id, ' s id');
  //   const { error, user } = addUser({ id: socket.id, name, room });

  //   if(error) return callback(error);

  //   socket.join(user.room);

  //   socket.emit('message', { user: 'admin', text: `${user.name}, welcome to room ${user.room}.`, time: new Date()});
  //   socket.broadcast.to(user.room).emit('message', { user: 'admin', text: `${user.name} has joined!`, time: new Date()});

  //   io.to(user.room).emit('roomData', { room: user.room, users: getUsersInRoom(user.room) });

  //   callback();
  // });

  // socket.on('sendMessage', (message, callback) => {
  //   const user = getUser(socket.id);

  //   io.to(user.room).emit('message', { user: user.name, text: message, time: new Date() });

  //   callback();
  // });
  // when the client emits 'sendchat', this listens and executes
	socket.on('sendchat', (data, callback) => {
    console.log(data, ' in send');
    var currentRoom = Object.keys(io.sockets.adapter.sids[socket.id]).filter(item => item!=socket.id);
		// we tell the client to execute 'updatechat' with 2 parameters
    io.sockets.in(currentRoom[0]).emit('updatechat', socket.username, { user: socket.username, text: data, time: new Date() });
    callback();
	});
  // when the user disconnects.. perform this
	socket.on('disconnect', function(){
		// remove the username from global usernames list
		delete usernames[socket.username];
		// update list of users in chat, client-side
		io.sockets.emit('updateusers', usernames);
		// echo globally that this client has left
		socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected');
		socket.leave(socket.room);
	});

  // socket.on('disconnect', () => {
  //   console.log('in disconnected');
  //   const user = removeUser(socket.id);

  //   if(user) {
  //     io.to(user.room).emit('message', { user: 'Admin', text: `${user.name} has left.` });
  //     io.to(user.room).emit('roomData', { room: user.room, users: getUsersInRoom(user.room)});
  //   }
  // })
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
